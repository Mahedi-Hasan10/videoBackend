Algorithm======

// req body -> data
// username or email
// find the user
// password check
// access and refresh token
// send cookie


const generateAccessAndRefreshToken=async(userId)=>{
    try{
        const user = await User.findOById(userId)
        const accessToken = user.generateAccessToken()
        const refreshToken = user.generateRefreshToken()
        user.refreshToken = refreshToken
        await user.save({validateBeforeSave:false})
        return {accessToken,refreshToken}
    }catch(error){
        thor error something went wrong while 
        generation refresh and access token
    }
}


============...1...================
const {email,username password} = req.body;


============...2...================
if(!username || !email)
{
    throw error "email  is required"
}


===============....3...=================
const user = await User.findOne({
    $or:[{username},{email}]
})
if(!user){
    threw error user doent exists
}


============...4...================
const is_valid_password = await user.isPasswordCorrect(password)
if(!is_valid_password){
    threw error invalid user credentials
}
============...5...================
const {accessToken,refreshToken} =await generateAccessAndRefreshToken(user?._id)

 const loggedInUser = await User.findOById(user?._id)
 .select("-password -refreshToken)

 const options = {
    httpOnly:true,
    secure:true
 }

return res.status(200).cookie("accessToken",accessToken,options)
.cookie("refreshToken",refreshToken,options)
.json({
    new apires(200,{
        user:loggedInUser,accessToken,
        refreshToken
    },
    "User logged in succseefully"
    )
})


============...6...================

User logout
logoutUser(async(req,res)=>{
    
})
